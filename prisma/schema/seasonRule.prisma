model SeasonRules {
    id String @id @default(uuid())

    name      String
    published Boolean
    minStay   Int

    visibilityStartDate DateTime? @db.Date
    startDate           DateTime @db.Date
    endDate   DateTime @db.Date

    /// [WeekDays]
    validWeekDays Json

    housingUnitTypePrices SeasonRuleHousingUnitType[]
    priceVariationType    PriceVariationType
    priceVariationValue   Float                       @db.DoublePrecision

    companyId String
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

    @@map("season_rules")
}

model SeasonRuleHousingUnitType {
    id String @id @default(uuid())

    housingUnitTypeId String
    housingUnitType   HousingUnitType @relation(fields: [housingUnitTypeId], references: [id], onDelete: Cascade)
    seasonRuleId      String
    seasonRule        SeasonRules     @relation(fields: [seasonRuleId], references: [id], onDelete: Cascade)

    baseWeekPrice     Float @db.DoublePrecision
    finalWeekPrice    Float @db.DoublePrecision
    baseWeekendPrice  Float @db.DoublePrecision
    finalWeekendPrice Float @db.DoublePrecision

    @@unique([housingUnitTypeId, seasonRuleId], name: "season_rule_housing_unit_type_unique")
    @@map("season_rule_housing_unit_types")
}
