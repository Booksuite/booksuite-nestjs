model Reservation {
    id String @id @default(uuid())

    reservationCode String // PATTERN 2 LETTER CHANNEL + 6 SEQUENTIAL NUMERIC (PER COMPANY)

    startDate DateTime
    endDate   DateTime
    totalDays Int?              @default(1)
    adults    Int
    notes     String            @db.Text
    status    ReservationStatus

    saleChannel ReservationSaleChannel @default(BOOKSUITE)

    sellerUserId String?
    sellerUser   User?   @relation("sellerUser", fields: [sellerUserId], references: [id], onDelete: SetNull)
    guestUserId  String?
    guestUser    User?   @relation("guestUser", fields: [guestUserId], references: [id], onDelete: SetNull)

    companyId     String
    company       Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
    housingUnitId String?
    housingUnit   HousingUnit? @relation(fields: [housingUnitId], references: [id], onDelete: SetNull)

    services          ReservationService[]
    childrens         ReservationAgeGroup[]
    reservationOption ReservationReservationOption[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    userId String?

    @@map("reservations")
}

enum ReservationSaleChannel {
    RECEPTION
    PHONE
    WHATSAPP
    INSTAGRAM
    TIKTOK
    EMAIL
    BOOKSUITE
    OTHER
}

enum ReservationStatus {
    WAITING_PAYMENT
    CONFIRMED
    CHECKED_IN
    CHECKED_OUT

    ABANDONED
    CANCELLED
    PAYMENT_FAILED
    OVERBOOKED
    WAITING_LIST
}

model ReservationService {
    id         String @id @default(uuid())
    qtd        Int    @default(1)
    totalPrice Float  @default(0) @db.DoublePrecision

    serviceId     String
    service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    reservationId String
    reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

    @@unique([reservationId, serviceId], name: "reservation_service_unique")
    @@map("reservation_services")
}

model ReservationReservationOption {
    id String @id @default(uuid())

    reservationOptionId String
    reservationOption   ReservationOption @relation(fields: [reservationOptionId], references: [id], onDelete: Cascade)
    reservationId       String
    reservation         Reservation       @relation(fields: [reservationId], references: [id], onDelete: Cascade)

    @@unique([reservationId, reservationOptionId], name: "reservation_reservation_option_unique")
    @@map("reservation_reservation_option")
}

model ReservationConfig {
    id String @id @default(uuid())

    tax Float?

    reservationDepositType      ReservationDepositType
    reservationDepositTypeValue Float?

    reservationPolicy String @db.Text

    companyId String  @unique
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("reservation_configs")
}

model ReservationAgeGroup {
    id String @id @default(uuid())

    ageGroupId    String
    ageGroup      AgeGroup    @relation(fields: [ageGroupId], references: [id], onDelete: Cascade)
    reservationId String
    reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

    children Int

    @@unique([ageGroupId, reservationId], name: "reservation_age_groups_unique")
    @@map("reservation_age_groups")
}

model ReservationOption {
    id String @id @default(uuid())

    name                      String
    published                 Boolean
    billingType               BillingType
    additionalAdultPrice      Float                               @db.DoublePrecision
    additionalChildrenPrice   Float                               @db.DoublePrecision
    availableHousingUnitTypes ReservationOptionHousingUnitTypes[]
    ageGroupPrices            ReservatonOptionAgeGroup[]
    reservation               ReservationReservationOption[]

    /// [WeekDays]
    availableWeekend Json

    /// [IncludedItems]
    includedItems Json

    companyId String
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("reservation_options")
}

model ReservatonOptionAgeGroup {
    id String @id @default(uuid())

    ageGroupId          String
    ageGroup            AgeGroup          @relation(fields: [ageGroupId], references: [id], onDelete: Cascade)
    reservationOptionId String
    reservationOption   ReservationOption @relation(fields: [reservationOptionId], references: [id], onDelete: Cascade)

    price Float @db.DoublePrecision

    @@unique([ageGroupId, reservationOptionId], name: "reservation_option_age_groups")
    @@map("reservation_option_age_groups")
}

model ReservationOptionHousingUnitTypes {
    id String @id @default(uuid())

    housingUnitTypeId   String
    housingUnitType     HousingUnitType   @relation(fields: [housingUnitTypeId], references: [id], onDelete: Cascade)
    reservationOptionId String
    reservationOption   ReservationOption @relation(fields: [reservationOptionId], references: [id], onDelete: Cascade)

    @@unique([housingUnitTypeId, reservationOptionId], name: "reservation_option_housingunittype_unique")
    @@map("reservation_option_housing_unit_types")
}

enum ReservationDepositType {
    PERCENTAGE_ON_RESERVATION
    FULL_AMOUNT_ON_RESERVATION
    DAYLIES_FULL_AMOUNT_ON_RESERVATION
    FIRST_DAYLY_ON_RESERVATION
    NO_CHARGE
}
