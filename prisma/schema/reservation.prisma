model Reservation {
    id String @id @default(uuid())

    reservationCode String // PATTERN 2 LETTER CHANNEL + 6 SEQUENTIAL NUMERIC (PER COMPANY)

    startDate  DateTime          @db.Date
    endDate    DateTime          @db.Date
    totalDays  Int?              @default(1)
    adults     Int
    notes      String            @db.Text
    status     ReservationStatus
    finalPrice Float             @db.DoublePrecision

    saleChannel ReservationSaleChannel @default(BOOKSUITE)

    sellerUserId String?
    sellerUser   User?   @relation("sellerUser", fields: [sellerUserId], references: [id], onDelete: SetNull)
    guestUserId  String
    guestUser    User   @relation("guestUser", fields: [guestUserId], references: [id], onDelete: SetNull)

    companyId     String
    company       Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
    housingUnitId String?
    housingUnit   HousingUnit? @relation(fields: [housingUnitId], references: [id], onDelete: SetNull)

    services     ReservationService[]
    ageGroups    ReservationAgeGroup[]
    rateOptionId String?
    rateOption   RateOption? @relation(fields: [rateOptionId], references: [id], onDelete: SetNull)

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    @@map("reservations")
}

enum ReservationSaleChannel {
    RECEPTION
    PHONE
    WHATSAPP
    INSTAGRAM
    TIKTOK
    EMAIL
    BOOKSUITE
    OTHER
}

enum ReservationStatus {
    WAITING_PAYMENT
    CONFIRMED
    CHECKED_IN
    CHECKED_OUT

    ABANDONED
    CANCELLED
    PAYMENT_FAILED
    OVERBOOKED
    WAITING_LIST
}

model ReservationService {
    id         String @id @default(uuid())
    quantity   Int    @default(1)
    totalPrice Float  @default(0) @db.DoublePrecision

    serviceId     String
    service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    reservationId String
    reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

    @@unique([reservationId, serviceId], name: "reservation_service_unique")
    @@map("reservation_services")
}

model ReservationConfig {
    id String @id @default(uuid())

    tax Float?

    reservationDepositType      ReservationDepositType
    reservationDepositTypeValue Float?

    reservationPolicy String @db.Text

    companyId String  @unique
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("reservation_configs")
}

model ReservationAgeGroup {
    id String @id @default(uuid())

    ageGroupId    String
    ageGroup      AgeGroup    @relation(fields: [ageGroupId], references: [id], onDelete: Cascade)
    reservationId String
    reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

    quantity Int

    @@unique([ageGroupId, reservationId], name: "reservation_age_groups_unique")
    @@map("reservation_age_groups")
}

enum ReservationDepositType {
    PERCENTAGE_ON_RESERVATION
    FULL_AMOUNT_ON_RESERVATION
    DAYLIES_FULL_AMOUNT_ON_RESERVATION
    FIRST_DAYLY_ON_RESERVATION
    NO_CHARGE
}
