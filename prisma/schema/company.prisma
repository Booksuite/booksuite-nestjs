model Company {
    id String @id @default(uuid())

    name             String
    slug             String  @unique
    shortDescription String?
    description      String? @db.Text
    published        Boolean @default(false)

    type CompanyType @default(HOTEL)

    timezone String?
    logo     String?
    favIcon  String?

    /// [CompanySettings]
    settings Json?
    /// [CompanyContact]
    contacts Json[]

    responsible      String
    responsibleEmail String
    responsiblePhone String

    docType               String?
    identification        String?
    companyName           String?
    stateRegistration     String?
    municipalRegistration String?

    address String?
    zipcode String?
    number  String?
    country String?
    state   String?
    city    String?

    /// [MapCoordinates]
    mapCoordinates Json?

    userCompanyRelation UserCompanyRelation[]
    housingUnitTypes    HousingUnitType[]

    agePolicy          AgePolicy?
    cancellationPolicy CancellationPolicy?
    reservationConfig  ReservationConfig?
    facilities         CompanyFacility[]
    banners            Banner[]
    reservations       Reservation[]
    services           Service[]
    medias             Media[]
    seasonRules        SeasonRules[]
    hostingRules       HostingRules?

    bannerImageId     String?
    bannerImage       Media?  @relation("BannerImage", fields: [bannerImageId], references: [id], onDelete: Cascade)
    bannerTitle       String?
    bannerDescription String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("companies")
}

enum CompanyType {
    INN
    HOTEL
    RESORT
    CHALET
    FARM_HOTEL
    AIRBNB
    HOSTEL
    FLAT_APART_HOTEL
    CAMPING
    OTHER
}

model CompanyFacility {
    id String @id @default(uuid())

    order Int? @default(0)

    companyId  String
    company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    facilityId String
    facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([companyId, facilityId], name: "company_facility_unique")
    @@map("company_facilities")
}

model SeasonRules {
    id String @id @default(uuid())

    name      String
    published Boolean
    startDate DateTime @db.Date
    endDate   DateTime @db.Date
    minDaily  Int

    /// [WeekDays]
    availableWeekend Json

    housingUnitTypePrices SeasonRuleHousingUnitType[]
    priceVariationType    PriceVariationType
    price                 Int

    companyId String
    company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

    @@map("season_rules")
}

model SeasonRuleHousingUnitType {
    id String @id @default(uuid())

    housingUnitTypeId String
    housingUnitType   HousingUnitType @relation(fields: [housingUnitTypeId], references: [id], onDelete: Cascade)
    seasonRuleId      String
    seasonRule        SeasonRules     @relation(fields: [seasonRuleId], references: [id], onDelete: Cascade)

    baseWeekPrice    Float
    newWeekPrice     Float  
    weekendBasePrice Float
    weekendNewPrice  Float

    @@unique([housingUnitTypeId, seasonRuleId], name: "season_rule_housing_unit_type_unique")
    @@map("season_rule_housing_unit_types")
}

enum PriceVariationType {
    ABSOLUTE_INCREASE
    ABSOLUTE_REDUCTION
    PERCENTAGE_INCREASE
    PERCENTAGE_REDUCTION
    CUSTOM
}
