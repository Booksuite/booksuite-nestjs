model Company {
    id String @id @default(uuid())

    name             String
    slug             String  @unique
    shortDescription String?
    description      String? @db.Text
    published        Boolean @default(false)

    type CompanyType @default(HOTEL)

    timezone String?
    logo     String?
    favIcon  String?

    /// [CompanySettings]
    settings Json?
    /// [CompanyContact]
    contacts Json[]

    responsible      String
    responsibleEmail String
    responsiblePhone String

    docType               String?
    identification        String?
    companyName           String?
    stateRegistration     String?
    municipalRegistration String?

    address String?
    zipcode String?
    number  String?
    country String?
    state   String?
    city    String?

    privacyPolicyDescription String?
    privacyPolicySimpleModel String?
    privacyPolicyFullModel   String?

    /// [MapCoordinates]
    mapCoordinates Json?

    userCompanyRelation UserCompanyRelation[]
    housingUnitTypes    HousingUnitType[]

    agePolicy          AgePolicy?
    cancellationPolicy CancellationPolicy?
    reservationConfig  ReservationConfig?
    reservationOptions ReservationOption[]
    facilities         CompanyFacility[]
    banners            Banner[]
    reservations       Reservation[]
    services           Service[]
    medias             Media[]
    seasonRules        SeasonRules[]
    utilityLinks       UtilityLinks[]
    hostingRules       HostingRules?
    specialDate        SpecialDate[]
    offers             Offer[]

    bannerImageId     String?
    bannerImage       Media?  @relation("BannerImage", fields: [bannerImageId], references: [id], onDelete: Cascade)
    bannerTitle       String?
    bannerDescription String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("companies")
}

model HostingRules {
    id String @id @default(uuid())

    checkIn  Int
    checkOut Int
    minDaily Int

    fixedWindowPeriod Int

    reservationWindowStart DateTime? @db.Date
    reservationWindowEnd   DateTime? @db.Date

    /// [WeekDays]
    availableWeekend  Json
    /// [WeekDays]
    availableWeekDays Json

    companyId String   @unique
    company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

    @@map("hosting_rules")
}

enum CompanyType {
    INN
    HOTEL
    RESORT
    CHALET
    FARM_HOTEL
    AIRBNB
    HOSTEL
    FLAT_APART_HOTEL
    CAMPING
    OTHER
}

model CompanyFacility {
    id String @id @default(uuid())

    order Int? @default(0)

    companyId  String
    company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    facilityId String
    facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([companyId, facilityId], name: "company_facility_unique")
    @@map("company_facilities")
}
